#ifndef DINPUT_H
#define DINPUT_H

#include "windows.h"

#define DISCL_NONEXCLUSIVE 0x1
#define DISCL_FOREGROUND 0x2
#define DISCL_NOWINKEY 0x4
#define DISCL_EXCLUSIVE 0x8

#define DIRECTINPUT_VERSION 0x1

#define DI_OK 0x1
#define GUID_SysKeyboard 0x1
#define DI8DEVTYPE_GAMEPAD 0x1
#define DIEDFL_ATTACHEDONLY 0x1
#define DIJOFS_X 0x1
#define DIJOFS_Y 0x2
#define DIPROP_RANGE 0x2
#define DIPROP_DEADZONE 0x4
#define DIENUM_CONTINUE 0x1
#define DIENUM_STOP 0x2
#define DIPH_BYOFFSET 0x1
typedef struct DIPROPHEADER {
	DWORD dwSize;
	DWORD dwHeaderSize;
	DWORD dwObj;
	DWORD dwHow;
} DIPROPHEADER, *LPDIPROPHEADER;
typedef const DIPROPHEADER* LPCDIPROPHEADER;
typedef struct DIPROPRANGE {
	DIPROPHEADER diph;
	LONG lMin;
	LONG lMax;
} DIPROPRANGE, *LPDIPROPRANGE;
typedef struct DIPROPDWORD {
	DIPROPHEADER diph;
	DWORD dwData;
} DIPROPDWORD, *LPDIPROPDWORD;

typedef struct {
} CDIDATAFORMAT, *LPCDIDATAFORMAT;
extern CDIDATAFORMAT c_dfDIKeyboard, c_dfDIJoystick;

struct IDirectInput;
struct IDirectInput7;
struct IDirectInputDevice7;
struct DIDEVICEINSTANCE;
struct IDirectInputDevice8 {
	HRESULT SetDataFormat(LPCDIDATAFORMAT lpdf);
	HRESULT SetCooperativeLevel(HWND hwnd,DWORD dwFlags);

	HRESULT Acquire();
	HRESULT Unacquire();
	HRESULT SetProperty(/*REFGUID*/int rguidProp,LPCDIPROPHEADER pdiph);
	HRESULT GetDeviceState(DWORD cbData,LPVOID lpvData);
	HRESULT Poll();

	void Release();
};

typedef struct DIDEVICEINSTANCE {
	DWORD dwSize;
	/*GUID*/int guidInstance;
	GUID guidProduct;
	DWORD dwDevType;
	TCHAR tszInstanceName[MAX_PATH];
	TCHAR tszProductName[MAX_PATH];
	GUID guidFFDriver;
	WORD wUsagePage;
	WORD wUsage;
} DIDEVICEINSTANCE, *LPDIDEVICEINSTANCE;
typedef const DIDEVICEINSTANCE * LPCDIDEVICEINSTANCE;
typedef BOOL(*LPDIENUMDEVICESCALLBACK)(LPCDIDEVICEINSTANCE lpddi,LPVOID pvRef);
typedef struct IDirectInput8 LPDIRECTINPUTDEVICE8A;
typedef struct IDirectInput8 LPDIRECTINPUTDEVICE8;
typedef struct IDirectInput8 LPDIRECTINPUTDEVICE;
struct IDirectInput8 {
	HRESULT CreateDevice(/*REFGUID*/int rguid,LPDIRECTINPUTDEVICE * lplpDirectInputDevice,LPUNKNOWN pUnkOuter);
	HRESULT EnumDevices(DWORD dwDevType, LPDIENUMDEVICESCALLBACK lpCallback,LPVOID pvRef,DWORD dwFlags);
	void Release();
};

#define IID_IDirectInput8 0
HRESULT DirectInput8Create(HINSTANCE hinst,DWORD dwVersion,/*REFIID*/int riidltf,LPVOID * ppvOut, void* unused);

BOOL CALLBACK EnumJoysticksCallback(const DIDEVICEINSTANCE* pdidInstance, VOID* pContext);

typedef struct {
	LONG lX;
	LONG lY;
	LONG lZ;
	LONG lRx;
	LONG lRy;
	LONG lRz;
	LONG rglSlider[2];
	DWORD rgdwPOV[4];
	BYTE rgbButtons[32];
} DIJOYSTATE;

typedef enum Keyboard_Device {
	DIK_0,
	DIK_1,
	DIK_2,
	DIK_3,
	DIK_4,
	DIK_5,
	DIK_6,
	DIK_7,
	DIK_8,
	DIK_9,
	DIK_A,
	DIK_ABNT_C1,
	DIK_ABNT_C2,
	DIK_ADD,
	DIK_APOSTROPHE,
	DIK_APPS,
	DIK_AT,
	DIK_AX,
	DIK_B,
	DIK_BACK,
	DIK_BACKSLASH,
	DIK_C,
	DIK_CALCULATOR,
	DIK_CAPITAL,
	DIK_COLON,
	DIK_COMMA,
	DIK_CONVERT,
	DIK_D,
	DIK_DECIMAL,
	DIK_DELETE,
	DIK_DIVIDE,
	DIK_DOWN,
	DIK_E,
	DIK_END,
	DIK_EQUALS,
	DIK_ESCAPE,
	DIK_F,
	DIK_F1,
	DIK_F2,
	DIK_F3,
	DIK_F4,
	DIK_F5,
	DIK_F6,
	DIK_F7,
	DIK_F8,
	DIK_F9,
	DIK_F10,
	DIK_F11,
	DIK_F12,
	DIK_F13,
	DIK_F14,
	DIK_F15,
	DIK_G,
	DIK_GRAVE,
	DIK_H,
	DIK_HOME,
	DIK_I,
	DIK_INSERT,
	DIK_J,
	DIK_K,
	DIK_KANA,
	DIK_KANJI,
	DIK_L,
	DIK_LBRACKET,
	DIK_LCONTROL,
	DIK_LEFT,
	DIK_LMENU,
	DIK_LSHIFT,
	DIK_LWIN,
	DIK_M,
	DIK_MAIL,
	DIK_MEDIASELECT,
	DIK_MEDIASTOP,
	DIK_MINUS,
	DIK_MULTIPLY,
	DIK_MUTE,
	DIK_MYCOMPUTER,
	DIK_N,
	DIK_NEXT,
	DIK_NEXTTRACK,
	DIK_NOCONVERT,
	DIK_NUMLOCK,
	DIK_NUMPAD0,
	DIK_NUMPAD1,
	DIK_NUMPAD2,
	DIK_NUMPAD3,
	DIK_NUMPAD4,
	DIK_NUMPAD5,
	DIK_NUMPAD6,
	DIK_NUMPAD7,
	DIK_NUMPAD8,
	DIK_NUMPAD9,
	DIK_NUMPADCOMMA,
	DIK_NUMPADENTER,
	DIK_NUMPADEQUALS,
	DIK_O,
	DIK_OEM_102,
	DIK_P,
	DIK_PAUSE,
	DIK_PERIOD,
	DIK_PLAYPAUSE,
	DIK_POWER,
	DIK_PREVTRACK,
	DIK_PRIOR,
	DIK_Q,
	DIK_R,
	DIK_RBRACKET,
	DIK_RCONTROL,
	DIK_RETURN,
	DIK_RIGHT,
	DIK_RMENU,
	DIK_RSHIFT,
	DIK_RWIN,
	DIK_S,
	DIK_SCROLL,
	DIK_SEMICOLON,
	DIK_SLASH,
	DIK_SLEEP,
	DIK_SPACE,
	DIK_STOP,
	DIK_SUBTRACT,
	DIK_SYSRQ,
	DIK_T,
	DIK_TAB,
	DIK_U,
	DIK_UNDERLINE,
	DIK_UNLABELED,
	DIK_UP,
	DIK_V,
	DIK_VOLUMEDOWN,
	DIK_VOLUMEUP,
	DIK_W,
	DIK_WAKE,
	DIK_WEBBACK,
	DIK_WEBFAVORITES,
	DIK_WEBFORWARD,
	DIK_WEBHOME,
	DIK_WEBREFRESH,
	DIK_WEBSEARCH,
	DIK_WEBSTOP,
	DIK_X,
	DIK_Y,
	DIK_YEN,
	DIK_Z
} Keyboard, *LPKeyboard;
#define DIK_BACKSPACE DIK_BACK

#endif

